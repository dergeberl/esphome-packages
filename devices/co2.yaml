substitutions:
  device_name: device-name
  friendly_name: "Friendly Name"
  uart_tx_pin: GPIO21
  uart_rx_pin: GPIO20
  mhz19_temperature_hide: "true"
  mhz19_update_interval: "60s"
  neopixel_pin: GPIO5
  neopixel_num_leds: 4
  status_led_pin: GPIO3


esphome:
  project: 
    name: "dergeberl.co2"
    version: "v0.0.0"

uart:
  id: uart_mhz19
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 9600

sensor:
  - platform: mhz19
    co2:
      name: ${friendly_name} CO2
      id: mhz19_co2
      device_class: carbon_dioxide
      on_value:
      - script.execute: update_leds
    temperature:
      name: ${friendly_name} Temperature
      internal: ${mhz19_temperature_hide}
    update_interval: 5s
    uart_id: uart_mhz19
    id: mhz19_id
    automatic_baseline_calibration: false

button:
  - platform: template
    name: ${friendly_name} calibrate zero
    entity_category: diagnostic
    on_press:
      - mhz19.calibrate_zero: mhz19_id

number:
  - platform: template
    name: ${friendly_name} LED brightness
    id: led_brightness
    optimistic: true
    entity_category: config
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50
    on_value: 
      then:
        - script.execute: update_leds

light:
  - platform: neopixelbus
    type: RGB
    variant: ws2812
    pin: ${neopixel_pin}
    internal: true
    num_leds: ${neopixel_num_leds}
    name: "led"
    id: sensor_status_led

  - platform: status_led
    pin: ${status_led_pin}
    id: esp_status_led

script:
  - id: update_leds
    mode: restart
    then:
    - if:
        condition:
           lambda: 'return id(mhz19_co2).state < ${led_orange_above};'
        then:
          - light.turn_on:
              id: sensor_status_led
              red: 0%
              green: 100%
              blue: 0%
              brightness: !lambda return id(led_brightness).state/100;
        else:
        - if:
            condition:
               lambda: 'return id(mhz19_co2).state < ${led_red_above};'
            then:
              - light.turn_on:
                  id: sensor_status_led
                  red: 100%
                  green: 70%
                  blue: 0%
                  brightness: !lambda return id(led_brightness).state/100;
            else:
            - if:
                condition:
                   lambda: 'return id(mhz19_co2).state < ${led_red_blink_above};'
                then:
                  - light.turn_on:
                      id: sensor_status_led
                      red: 100%
                      green: 0%
                      blue: 0%
                      brightness: !lambda return id(led_brightness).state/100;
                else:
                - light.turn_on:
                    id: sensor_status_led
                    red: 100%
                    green: 0%
                    blue: 0%
                    brightness: !lambda return id(led_brightness).state/100;
                - delay: 1200ms 
                - light.turn_on:
                    id: sensor_status_led
                    brightness: 0%
                - delay: 1000ms
                - script.execute: update_leds